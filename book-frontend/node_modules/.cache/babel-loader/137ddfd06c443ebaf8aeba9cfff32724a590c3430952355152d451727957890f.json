{"ast":null,"code":"var _jsxFileName = \"C:\\\\my_lab\\\\book\\\\book-frontend\\\\src\\\\views\\\\Board\\\\Gpt\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Gpt() {\n  _s();\n  const [chatMessages, setChatMessages] = useState([]);\n  const [userInput, setUserInput] = useState('');\n  const apiKey = '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';\n  const apiEndpoint = 'https://api.openai.com/v1/chat/completions';\n  const handleClick = async () => {\n    const message = userInput.trim();\n    if (message.length === 0) return;\n    addMessage('나', message);\n    setUserInput('');\n    const aiResponse = await fetchAIResponse(message);\n    addMessage('챗봇', aiResponse);\n  };\n  const addMessage = (sender, message) => {\n    setChatMessages(prevMessages => [...prevMessages, `${sender}: ${message}`]);\n  };\n  const fetchAIResponse = async prompt => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${apiKey}`\n      },\n      body: JSON.stringify({\n        model: 'gpt-3.5-turbo-0125',\n        messages: [{\n          role: 'system',\n          content: \"You answers based on file 'shorts.json'\"\n        }, {\n          role: 'user',\n          content: prompt\n        }],\n        temperature: 0.8,\n        max_tokens: 1024,\n        top_p: 1,\n        frequency_penalty: 0.5,\n        presence_penalty: 0.5,\n        stop: ['Human']\n      })\n    };\n    try {\n      const response = await fetch(apiEndpoint, requestOptions);\n      const data = await response.json();\n      const aiResponse = data.choices[0].message.content;\n      return aiResponse;\n    } catch (error) {\n      console.error('OpenAI API 호출 중 오류 발생:', error);\n      return 'OpenAI API 호출 중 오류 발생';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"all-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hiword\",\n        children: \"OpenAI\\uB97C \\uC774\\uC6A9\\uD55C \\uCC57\\uBD07\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chat-messages\",\n        children: chatMessages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message\",\n          children: message\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"user-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: e => setUserInput(e.target.value),\n          value: userInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleClick,\n          children: \"\\uC804\\uC1A1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(Gpt, \"38IZ4s+k8UKjOZZBcSfq9BG5ODw=\");\n_c = Gpt;\nvar _c;\n$RefreshReg$(_c, \"Gpt\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Gpt","_s","chatMessages","setChatMessages","userInput","setUserInput","apiKey","apiEndpoint","handleClick","message","trim","length","addMessage","aiResponse","fetchAIResponse","sender","prevMessages","prompt","requestOptions","method","headers","Authorization","body","JSON","stringify","model","messages","role","content","temperature","max_tokens","top_p","frequency_penalty","presence_penalty","stop","response","fetch","data","json","choices","error","console","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","map","index","type","onChange","e","target","value","onClick","_c","$RefreshReg$"],"sources":["C:/my_lab/book/book-frontend/src/views/Board/Gpt/index.tsx"],"sourcesContent":["import { useState } from 'react';\r\nimport './style.css';\r\n\r\nexport default function Gpt() {\r\n  const [chatMessages, setChatMessages] = useState<string[]>([]);\r\n  const [userInput, setUserInput] = useState<string>('');\r\n\r\n  const apiKey: string = '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';\r\n  const apiEndpoint: string = 'https://api.openai.com/v1/chat/completions';\r\n\r\n  const handleClick = async () => {\r\n    const message: string = userInput.trim();\r\n    if (message.length === 0) return;\r\n\r\n    addMessage('나', message);\r\n    setUserInput('');\r\n\r\n    const aiResponse: string = await fetchAIResponse(message);\r\n    addMessage('챗봇', aiResponse);\r\n  };\r\n\r\n  const addMessage = (sender: string, message: string): void => {\r\n    setChatMessages((prevMessages) => [\r\n      ...prevMessages,\r\n      `${sender}: ${message}`,\r\n    ]);\r\n  };\r\n\r\n  const fetchAIResponse = async (prompt: string): Promise<string> => {\r\n    const requestOptions: RequestInit = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${apiKey}`,\r\n      },\r\n      body: JSON.stringify({\r\n        model: 'gpt-3.5-turbo-0125',\r\n        messages: [\r\n          {\r\n            role: 'system',\r\n            content: \"You answers based on file 'shorts.json'\",\r\n          },\r\n          { role: 'user', content: prompt },\r\n        ],\r\n        temperature: 0.8,\r\n        max_tokens: 1024,\r\n        top_p: 1,\r\n        frequency_penalty: 0.5,\r\n        presence_penalty: 0.5,\r\n        stop: ['Human'],\r\n      }),\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(apiEndpoint, requestOptions);\r\n      const data = await response.json();\r\n      const aiResponse: string = data.choices[0].message.content;\r\n      return aiResponse;\r\n    } catch (error) {\r\n      console.error('OpenAI API 호출 중 오류 발생:', error);\r\n      return 'OpenAI API 호출 중 오류 발생';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"all-container\">\r\n      <div id=\"chat-container\">\r\n        <div className=\"hiword\">OpenAI를 이용한 챗봇</div>\r\n        <div id=\"chat-messages\">\r\n          {chatMessages.map((message, index) => (\r\n            <div key={index} className=\"message\">\r\n              {message}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div id=\"user-input\">\r\n          <input\r\n            type=\"text\"\r\n            onChange={(e) => setUserInput(e.target.value)}\r\n            value={userInput}\r\n          />\r\n          <button onClick={handleClick}>전송</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGN,QAAQ,CAAW,EAAE,CAAC;EAC9D,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAS,EAAE,CAAC;EAEtD,MAAMS,MAAc,GAAG,qDAAqD;EAC5E,MAAMC,WAAmB,GAAG,4CAA4C;EAExE,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,MAAMC,OAAe,GAAGL,SAAS,CAACM,IAAI,CAAC,CAAC;IACxC,IAAID,OAAO,CAACE,MAAM,KAAK,CAAC,EAAE;IAE1BC,UAAU,CAAC,GAAG,EAAEH,OAAO,CAAC;IACxBJ,YAAY,CAAC,EAAE,CAAC;IAEhB,MAAMQ,UAAkB,GAAG,MAAMC,eAAe,CAACL,OAAO,CAAC;IACzDG,UAAU,CAAC,IAAI,EAAEC,UAAU,CAAC;EAC9B,CAAC;EAED,MAAMD,UAAU,GAAGA,CAACG,MAAc,EAAEN,OAAe,KAAW;IAC5DN,eAAe,CAAEa,YAAY,IAAK,CAChC,GAAGA,YAAY,EACd,GAAED,MAAO,KAAIN,OAAQ,EAAC,CACxB,CAAC;EACJ,CAAC;EAED,MAAMK,eAAe,GAAG,MAAOG,MAAc,IAAsB;IACjE,MAAMC,cAA2B,GAAG;MAClCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAG,UAASf,MAAO;MAClC,CAAC;MACDgB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,KAAK,EAAE,oBAAoB;QAC3BC,QAAQ,EAAE,CACR;UACEC,IAAI,EAAE,QAAQ;UACdC,OAAO,EAAE;QACX,CAAC,EACD;UAAED,IAAI,EAAE,MAAM;UAAEC,OAAO,EAAEX;QAAO,CAAC,CAClC;QACDY,WAAW,EAAE,GAAG;QAChBC,UAAU,EAAE,IAAI;QAChBC,KAAK,EAAE,CAAC;QACRC,iBAAiB,EAAE,GAAG;QACtBC,gBAAgB,EAAE,GAAG;QACrBC,IAAI,EAAE,CAAC,OAAO;MAChB,CAAC;IACH,CAAC;IAED,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC7B,WAAW,EAAEW,cAAc,CAAC;MACzD,MAAMmB,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC,MAAMzB,UAAkB,GAAGwB,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC9B,OAAO,CAACmB,OAAO;MAC1D,OAAOf,UAAU;IACnB,CAAC,CAAC,OAAO2B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,OAAO,uBAAuB;IAChC;EACF,CAAC;EAED,oBACEzC,OAAA;IAAK2C,SAAS,EAAC,eAAe;IAAAC,QAAA,eAC5B5C,OAAA;MAAK6C,EAAE,EAAC,gBAAgB;MAAAD,QAAA,gBACtB5C,OAAA;QAAK2C,SAAS,EAAC,QAAQ;QAAAC,QAAA,EAAC;MAAc;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC5CjD,OAAA;QAAK6C,EAAE,EAAC,eAAe;QAAAD,QAAA,EACpBzC,YAAY,CAAC+C,GAAG,CAAC,CAACxC,OAAO,EAAEyC,KAAK,kBAC/BnD,OAAA;UAAiB2C,SAAS,EAAC,SAAS;UAAAC,QAAA,EACjClC;QAAO,GADAyC,KAAK;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACNjD,OAAA;QAAK6C,EAAE,EAAC,YAAY;QAAAD,QAAA,gBAClB5C,OAAA;UACEoD,IAAI,EAAC,MAAM;UACXC,QAAQ,EAAGC,CAAC,IAAKhD,YAAY,CAACgD,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;UAC9CA,KAAK,EAAEnD;QAAU;UAAAyC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClB,CAAC,eACFjD,OAAA;UAAQyD,OAAO,EAAEhD,WAAY;UAAAmC,QAAA,EAAC;QAAE;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC/C,EAAA,CAnFuBD,GAAG;AAAAyD,EAAA,GAAHzD,GAAG;AAAA,IAAAyD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}