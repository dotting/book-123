package com.example.book.filter;

import java.io.IOException;

import org.springframework.security.authentication.AbstractAuthenticationToken;
/*import org.apache.tomcat.util.http.parser.Authorization;
import org.springframework.core.type.filter.AbstractClassTestingTypeFilter; */
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;

import com.example.book.provider.JwtProvider;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;


@Component
@RequiredArgsConstructor
public class JwtAuthenticationFilter extends OncePerRequestFilter{
	
	private final JwtProvider jwtProvider;

	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
		
		String token = parseBearerToken(request);
		if (token == null) {
			filterChain.doFilter(request, response);
			return;
		}
		
		String emailString = jwtProvider.validate(token);
		
		if (emailString ==null ) {
			filterChain.doFilter(request, response);
			return;
		}
		
		AbstractAuthenticationToken authenticationToken = 
			new ;
		
		
	}
	
	private String parseBearerToken(HttpServletRequest request) {
		
		String authorization =request.getHeader("Authorization");
		
		boolean hasAthorzation = StringUtils.hasText(authorization);
		if(!hasAthorzation) return null;
		
		boolean isBearer = authorization.startsWith("Bearer");
		if(!isBearer) return null;
		
		String token = authorization.substring(7);
		return token;
		
	}
}
